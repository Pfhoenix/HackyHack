Add options to Firewall test menu
- easy, medium, hard firewalls to play with

Need to start rendering the network
 - devices need to be movable, but based on a grid

Need a general network crawler
 - needs testing

Devices
 - working on base functionality

UINetworkView

UITextBox
 - need to implement this
 - will necessitate handling keyboard display/hiding and input capturing

UIMenu
 - need to test having a lot of open items to scroll through
   - need to auto-scroll to the new end of the open list when items are added or removed

UIWindow
 - dynamic background would be seriously cool

SimpleGestureProcessor : 
 - there's still an issue with releasing both fingers after a scale triggering a tap

UIManager :
 - think about how to handle universal messageboxes

ContentManager
 - need to write bitmap/image loading code
   - needs to allow loading in a different thread
     - this will enable progress bar for large load batches
   - need to allow immediate/blocking loading
     - for on-demand loading (such as initial title screen and whatnot)

basic Android stuff
 - need to handle having to reload textures, too
   - this doesn't seem to be immediately necessary, so...?

UITaskBar
 - really ugly, need to update visuals


Ideas :

When player starts the app, need several screens :
 - company logo splash
 - loading screen with OS boot stuff
   - link each block of technobabble text to loading specific assets and such
 - discovery/crawl of entire network starting at all DTEs and spreading out from there


Issues :
 - bandwidth updating is currently DTE-out
   - start with this and see if this really is an issue needing optimization
 - is fine until you consider cases where clients may be off or devices may be active but not pulling traffic on their own
   - clients consume bandwidth, network devices distribute it
 - ideal behavior would be to start with all clients/servers that push up bandwidth needs
   - once bandwidth need pass reaches DTE, DTE allocates bandwidth down through each network device, which would then properly allocate bandwidth
 - there are really two basic approaches :
   - a pre-calculated bandwidth usage that calculates bandwidth availability pushing and bandwidth consumption pulling across the network
     - start with bandwidth consumers
       - all consumers pass to their connected network device their bandwidth demands
       - each network device with only one other connected network device passes along it's total bandwidth demand
         - this continues until hits a DTE or a network device with multiple network device connections
     - starting at DTEs
       - each network device
   - a simulated-over-time approach where every tick :
     - a reset starts with 
     - consumer devices broadcast bandwidth demand
       - if connected device